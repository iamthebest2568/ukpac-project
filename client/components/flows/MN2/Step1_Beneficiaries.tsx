/**
 * UK PACK - MN2 Step 1: Beneficiaries Selection
 * Moved from BeneficiaryGroups component
 */

import { useState } from "react";
import { logEvent } from '../../../services/dataLogger.js';

interface Step1_BeneficiariesProps {
  sessionID: string | null;
  onNext: (data: any) => void;
  onBack?: () => void;
  initialData?: string[];
}

const Step1_Beneficiaries = ({ sessionID, onNext, onBack, initialData = [] }: Step1_BeneficiariesProps) => {
  const [selectedGroups, setSelectedGroups] = useState<string[]>(initialData);
  const maxSelections = 3;

  const beneficiaryGroups = [
    { id: 'everyone', label: '‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô', icon: 'üë•', description: '‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô' },
    { id: 'locals', label: '‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà', icon: 'üèòÔ∏è', description: '‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏®‡∏±‡∏¢‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà' },
    { id: 'elderly', label: '‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏', icon: 'üë¥', description: '‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏ 60 ‡∏õ‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ' },
    { id: 'students', label: '‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤', icon: 'üéì', description: '‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡∏∞‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤' },
    { id: 'disabled', label: '‡∏Ñ‡∏ô‡∏û‡∏¥‡∏Å‡∏≤‡∏£', icon: '‚ôø', description: '‡∏ú‡∏π‡πâ‡∏û‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó' },
    { id: 'other', label: '‡∏≠‡∏∑‡πà‡∏ô‡πÜ', icon: '‚ùì', description: '‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á' }
  ];

  const handleGroupToggle = (groupId: string) => {
    setSelectedGroups(prev => {
      const isSelected = prev.includes(groupId);
      
      if (isSelected) {
        // Remove if already selected
        return prev.filter(g => g !== groupId);
      } else {
        // Add if not selected and under limit
        if (prev.length < maxSelections) {
          return [...prev, groupId];
        }
        return prev;
      }
    });
  };

  const handleNext = () => {
    // Log the minigame completion
    logEvent({
      event: 'MINIGAME_MN2_COMPLETE',
      payload: {
        selectedGroups,
        sessionID
      }
    });

    const data = { beneficiaries: { selectedGroups } };
    onNext(data);
  };

  const isSelectionDisabled = (groupId: string) => {
    return selectedGroups.length >= maxSelections && !selectedGroups.includes(groupId);
  };

  return (
    <div className="theme-dark min-h-screen">
      <div className="app-container py-8 animate-fade-in-up">
        {/* Question Section */}
        <div className="question-section">
          <h1 className="text-h2">
            ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏¥‡∏î‡∏ß‡πà‡∏≤‡πÉ‡∏Ñ‡∏£‡∏Ñ‡∏ß‡∏£‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏£‡∏£‡∏ñ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ö‡πâ‡∏≤‡∏á
          </h1>
        </div>
        
        {/* Answer Section */}
        <div className="answer-section">
          <div className="grid grid-cols-2 gap-4">
            {beneficiaryGroups.map((group) => (
              <div 
                key={group.id}
                className={`selection-card ${
                  selectedGroups.includes(group.id) ? 'selected' : ''
                } ${isSelectionDisabled(group.id) ? 'disabled' : ''}`}
                onClick={() => !isSelectionDisabled(group.id) && handleGroupToggle(group.id)}
                role="checkbox"
                aria-checked={selectedGroups.includes(group.id)}
                aria-disabled={isSelectionDisabled(group.id)}
                aria-describedby={`group-${group.id}-description`}
                tabIndex={isSelectionDisabled(group.id) ? -1 : 0}
                onKeyDown={(e) => {
                  if ((e.key === 'Enter' || e.key === ' ') && !isSelectionDisabled(group.id)) {
                    e.preventDefault();
                    handleGroupToggle(group.id);
                  }
                }}
              >
                <div className="text-4xl mb-3" role="img" aria-label={group.description}>
                  {group.icon}
                </div>
                <div className="text-body font-medium text-white mb-1">
                  {group.label}
                </div>
                <div 
                  id={`group-${group.id}-description`}
                  className="text-caption text-gray-300"
                >
                  {group.description}
                </div>
                
                {/* Selection indicator */}
                {selectedGroups.includes(group.id) && (
                  <div className="absolute top-2 right-2 w-6 h-6 bg-primary-action rounded-full flex items-center justify-center">
                    <svg className="w-4 h-4 text-black" fill="currentColor" viewBox="0 0 20 20" role="img" aria-label="‡πÄ‡∏•‡∏∑‡∏≠‡∏ÅÔøΩÔøΩ‡∏•‡πâ‡∏ß">
                      <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                    </svg>
                  </div>
                )}
              </div>
            ))}
          </div>
        </div>

        {/* System Status - Selection Counter */}
        <div className="selection-counter">
          ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î {maxSelections} ‡∏Å‡∏•‡∏∏‡πà‡∏° (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß {selectedGroups.length}/{maxSelections})
        </div>

        {/* Error Prevention Message */}
        {selectedGroups.length >= maxSelections && (
          <div className="status-message warning">
            ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏£‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏°‡πà ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÉ‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Å‡πà‡∏≠‡∏ô
          </div>
        )}

        {/* Progress indicator */}
        <div className="progress-container">
          <div className="progress-dots">
            <div className="progress-dot completed" aria-label="‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1 ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô"></div>
            <div className="progress-dot completed" aria-label="‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2 ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô"></div>
            <div className="progress-dot completed" aria-label="ÔøΩÔøΩ‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3 ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô"></div>
            <div className="progress-dot active" aria-label="‡∏Ç‡∏±‡πâ‡∏ô‡∏ïÔøΩÔøΩ‡∏ô‡∏ó‡∏µ‡πà 4 ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£"></div>
            <div className="progress-dot inactive" aria-label="‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 5"></div>
          </div>
          <p className="text-caption">‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 4 ‡∏à‡∏≤‡∏Å 5</p>
        </div>

        {/* Completion Zone */}
        <div className="completion-zone">
          
          <button 
            className="btn btn-primary"
            onClick={handleNext}
            disabled={selectedGroups.length === 0}
            aria-describedby="next-button-description"
          >
            ‡πÑ‡∏õ‡∏ï‡πà‡∏≠
          </button>
          
          {selectedGroups.length === 0 && (
            <div id="next-button-description" className="status-message info mt-4">
              ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default Step1_Beneficiaries;
