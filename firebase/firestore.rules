rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helpers
    function isAuthenticated() {
      return request.auth != null;
    }

    function isAdmin() {
      return isAuthenticated() && request.auth.token.admin == true;
    }

    // PDPA acceptance helper: accepts either top-level field or payload.{PDPA|pdpa} as boolean or string 'accepted'
    function pdpaAcceptedFor(resource) {
      return (
        (resource.PDPA == true) ||
        (resource.pdpa == true) ||
        (resource.PDPA == "accepted") ||
        (resource.pdpa == "accepted") ||
        (resource.payload != null && (
          resource.payload.PDPA == true ||
          resource.payload.pdpa == true ||
          resource.payload.PDPA == "accepted" ||
          resource.payload.pdpa == "accepted"
        ))
      );
    }

    // Generic entry validation used by event collections
    function isValidEventEntry(resource) {
      return resource.keys().hasAll(['sessionID','timestamp','event','payload'])
        && resource.sessionID is string
        && resource.sessionID.size() <= 128
        && (resource.timestamp is int || resource.timestamp is string)
        && resource.event is string
        && resource.event.size() <= 64
        && resource.payload is map
        && (!('PDPA' in resource) || resource.PDPA is bool || resource.PDPA is string)
        && (!('ip' in resource) || (resource.ip is string && resource.ip.size() <= 64))
        && (!('userAgent' in resource) || (resource.userAgent is string && resource.userAgent.size() <= 1024));
    }

    // Image design event validation
    function isValidImageDesignEntry(resource) {
      return resource.keys().hasOnly(['imageUrl','createdAt'])
        && resource.imageUrl is string
        && resource.imageUrl.size() > 0
        && resource.imageUrl.size() <= 2048
        && (!('createdAt' in resource) || resource.createdAt is timestamp);
    }

    // Rules for minigame1_events collection: disallow direct top-level writes.
    // We only accept writes to the 'events' subcollection under the fixed document id 'minigame1-di'.
    match /minigame1_events/{eventId} {
      // Disallow client-created documents at top-level to prevent accidental doc ids (e.g., minigame2-di)
      allow create: if false;

      // Restrict read/update/delete to admins only
      allow get, list, update, delete: if isAdmin();
    }

    // Allow writes to events subcollection under a minigame1_events document
    match /minigame1_events/{docId}/events/{eventId} {
      allow create: if isValidEventEntry(request.resource.data);
      allow get, list, update, delete: if isAdmin();
    }

    // Allow writes to events subcollection under a minigame2_events document
    match /minigame2_events/{docId}/events/{eventId} {
      allow create: if isValidEventEntry(request.resource.data);
      allow get, list, update, delete: if isAdmin();
    }


    // Image design writes (DesignScreen)
    match /beforecitychange-imageshow-events/{docId} {
      // Allow anonymous create with strict shape; no read/update/delete
      allow create: if isValidImageDesignEntry(request.resource.data);
      allow get, list, update, delete: if isAdmin();
    }
    match /kpact-gamebus-imagedesign-events/{docId} {
      // Allow anonymous create with strict shape; no read/update/delete
      allow create: if isValidImageDesignEntry(request.resource.data);
      allow get, list, update, delete: if isAdmin();
    }
    match /ukpact-gamebus-imagedesign-events/{docId} {
      allow create: if isValidImageDesignEntry(request.resource.data);
      allow get, list, update, delete: if isAdmin();
    }

    // Deny all other reads/writes by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
